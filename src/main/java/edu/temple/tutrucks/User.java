package edu.temple.tutrucks;
// Generated Feb 15, 2016 6:30:46 PM by Hibernate Tools 4.3.1

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Random;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.Session;



/**
 * User generated by hbm2java
 * 
 * Represents a user of the TUTrucks application. Its mapping file is User.hbm.xml
 * 
 * @author Nick Dell'Osa
 * @version %PROJECT_VERSION%
 */
public class User implements java.io.Serializable, Visualizable {

    private static final Random SALTER = new java.security.SecureRandom();
    private static final String EMAIL_PATTERN = "(.+)@(.+)\\.((com)|(edu)|(org)|(gov)|(net)|(io))";

    private int id;
    private String userEmail;
    private byte[] passWord;
    private boolean fbLink;
    private String avatar;
    private List<TruckReview> truckReviews;
    private List<ItemReview> itemReviews;
    private String displayName;
    private Permissions permissions;
    private byte[] salt;
    private byte[] facebookID;
    private byte[] facebookSalt;

    /**
     * Empty constructor required by Hibernate
     */
    public User() {
        this.id = 0;
    }

    /**
     * Returns the ID of this user. Required by Hibernate
     *
     * @return the ID of this user
     */
    public int getId() {
        return this.id;
    }

    /**
     * Sets the ID of this user. Required by Hibernate
     *
     * @param id the ID of this user
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the email this user registered with. Required by Hibernate
     *
     * @return this user's email address
     */
    public String getUserEmail() {
        return this.userEmail;
    }

    /**
     * Sets the email address of this user. Required by Hibernate
     *
     * @param userEmail this user's email address
     */
    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    /**
     * Returns the salted and hashed user password stored in the database.
     * Required by Hibernate
     *
     * @return this user's password, properly salted and hashed
     */
    public byte[] getPassWord() {
        return this.passWord;
    }

    /**
     * Sets this user's password. It is assumed that the string passed to this
     * function has already been properly salted and hashed. Required by
     * Hibernate
     *
     * @param passWord this user's password, properly salted and hashed
     */
    public void setPassWord(byte[] passWord) {
        this.passWord = passWord;
    }

    /**
     * Returns a boolean value reflecting whether this user signed up via
     * Facebook. Required by Hibernate
     *
     * @return true if the user signed up via Facebook, otherwise false
     */
    public boolean isFbLink() {
        return this.fbLink;
    }

    /**
     * Sets the boolean value reflecting whether this user signed up via
     * Facebook. Required by Hibernate
     *
     * @param fbLink boolean value reflecting whether this user signed up via
     * Facebook
     */
    public void setFbLink(boolean fbLink) {
        this.fbLink = fbLink;
    }

    /**
     * Returns a link to this user's avatar. Required by Hibernate
     * @return a link to this user's avatar
     */
    @Override
    public String getAvatar() {
        return this.avatar;
    }
    /**
     * Sets the link to this user's avatar. Required by Hibernate
     * @param avatar the link to this user's avatar
     */
    @Override
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }
    /**
     * Returns a list of reviews for trucks written by this user. Required by Hibernate
     * @return the list of reviews for trucks written by this user
     */
    public List getTruckReviews() {
        
        return this.truckReviews;
    }
    /**
     * Returns a list of reviews for items written by this user. Required by Hibernate
     * @return the list of reviews for items written by this user
     */
    public List getItemReviews() {
        return itemReviews;
    }
    /**
     * Adds a review to this user's list of reviews. The user for the review must already be the user whose list the review is being added to. Required by Hibernate
     * @param r the review to add to this user's list of reviews
     */
    public void addReview(Review r) throws IllegalArgumentException {
        r.setUser(this);
    }
    /**
     * Sets the list of reviews for trucks written by this user. Required by Hibernate
     * @param truckReviews the list of reviews for trucks written by this user
     */
    public void setTruckReviews(List<TruckReview> truckReviews) {
        this.truckReviews = truckReviews;
    }
    /**
     * Sets the list of reviews for items written by this user. Required by Hibernate
     * @param itemReviews the list of reviews for items written by this user
     */
    public void setItemReviews(List<ItemReview> itemReviews) {
        this.itemReviews = itemReviews;
    }
    /**
     * Returns the display name for this user. Required by Hibernate
     * @return the display name for this user
     */
    public String getDisplayName() {
        return displayName;
    }
    /**
     * Sets the display name for this user. Required by Hibernate
     * @param displayName the display name for this user
     */
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }
    /**
     * Returns the level of permissions available to this user. Required by Hibernate
     * @return the level of permissions available to this user
     */
    public Permissions getPermissions() {
        return permissions;
    }
    /**
     * Sets the level of permissions available to this user. Required by Hibernate
     * @param permissions the level of permissions available to this user
     */
    public void setPermissions(Permissions permissions) {
        this.permissions = permissions;
    }
    /**
     * Returns the salt of this user.
     * @return this user's salt
     */
    public byte[] getSalt() {
        return salt;
    }
    /**
     * Sets the salt for this user.
     * @param salt the new salt for this user
     */
    public void setSalt(byte[] salt) {
        this.salt = salt;
    }
    /**
     * Returns this user's Facebook ID.
     * @return this user's Facebook ID
     */
    public byte[] getFacebookID() {
        return facebookID;
    }
    /**
     * Sets this user's Facebook ID.
     * @param fbID this user's new Facebook ID
     */
    public void setFacebookID(byte[] fbID) {
        this.facebookID = fbID;
    }
    /**
     * Returns the salt for this user's Facebook ID
     * @return the salt for this user's Facebook ID
     */
    public byte[] getFacebookSalt() {
        return facebookSalt;
    }
    /**
     * Sets the salt for this user's Facebook ID
     * @param facebookSalt the new salt for this user's Facebook ID
     */
    public void setFacebookSalt(byte[] facebookSalt) {
        this.facebookSalt = facebookSalt;
    }
    
    private static byte[] generateSalt() {
        byte[] salt = new byte[16];
        SALTER.nextBytes(salt);
        return salt;
    }
    /**
     * Changes this user's password and saves the change to the database.
     * @param newPassword the new unencrypted password for this user
     */
    public void changePassword(String newPassword) {
        if (newPassword.length() > 16) {
            throw new IllegalArgumentException("Password is too long (16 characters max).");
        } else if (newPassword.length() < 6) {
            throw new IllegalArgumentException("Password is too short (6 characters min)."); 
        }
        byte[] newSalt = generateSalt();
        byte[] epass = encryptPassword(newPassword, newSalt);
        this.setSalt(newSalt);
        this.setPassWord(epass);
    }
    
    private static byte[] encryptPassword(String password, byte[] salt) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] pwba = password.getBytes(StandardCharsets.UTF_8);
            byte[] saltedPassword = new byte[salt.length + pwba.length];
            for (int i=0; i < saltedPassword.length; i++)
                saltedPassword[i] = (i < 16 ? salt[i] : pwba[i-16]);
            
            byte[] hash = digest.digest(saltedPassword);
            return hash;
        } catch (NoSuchAlgorithmException ex) {
            //error handling
            return null;
        }
    }
    /**
     * Validates the credentials submitted and returns the associated user object.
     * @param email the email of the user
     * @param password the unencrypted password of the user
     * @return the associated user object if the credentials are correct; null otherwise
     */
    public static User validateUser(String email, String password) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery("from User where userEmail = :email").setString("email", email);
        User user = (User) q.uniqueResult();
        session.close();
        byte[] encrypted = encryptPassword(password, user.salt);
        return Arrays.equals(user.passWord, encrypted) ? user : null;
    }
    /**
     * Validates the credentials submitted and returns the associated user object.
     * @param email the email of the user
     * @param fbID the Facebook ID of the user
     * @return the associated user object if the credentials are correct; null otherwise
     */
    public static User validateUserFacebook(String email, String fbID) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery("from User where userEmail = :email").setString("email", email);
        User user = (User) q.uniqueResult();
        session.close();
        byte[] encrypted = encryptPassword(fbID, user.facebookSalt);
        return Arrays.equals(user.facebookID, encrypted) ? user : null;
    }
    /**
     * Links this user to their Facebook account.
     * @param fbID the Facebook ID of this user
     */
    public void linkUserFacebook(String fbID) {
        this.setFbLink(true);
        this.setFacebookSalt(generateSalt());
        this.setFacebookID(encryptPassword(fbID, this.facebookSalt));
        this.save();
    }
    /**
     * Links this user to their Facebook account.
     * @param fbID the Facebook ID of this user
     * @param displayName the name of this user on Facebook
     * @param avatar the link to this user's Facebook profile picture
     */
    public void linkUserFacebook(String fbID, String displayName, String avatar) {
        this.setDisplayName(displayName);
        this.setAvatar(avatar);
        this.linkUserFacebook(fbID);
        this.save();
    }
    /**
     * Creates a user with the specified credentials.
     * @param email the new user's email
     * @param password the new user's password
     * @param facebook whether or not the new user is signing up via Facebook
     * @param displayName the display name of the new user
     * @param fbAvatarURL a link to the avatar of the new user
     * @param fbID the Facebook ID of the new user
     * @return the User object representing the newly created user
     */
    public static User createUser(String email, String password, boolean facebook, String displayName, String fbAvatarURL, String fbID) {
        User user = new User();
        if (!email.matches(EMAIL_PATTERN)) 
            throw new IllegalArgumentException("Email is not valid.");
        else if (existsEmail(email))
            throw new IllegalArgumentException("Email already exists in database.");
        else if (password.length() > 16)
            throw new IllegalArgumentException("Password is too long (16 characters max).");
        else if (password.length() < 6)
            throw new IllegalArgumentException("Password is too short (6 characters min).");
        else if (facebook && existsFB(fbID))
            throw new IllegalArgumentException("An account already exists for this Facebook profile.");
        
        user.setUserEmail(email);
        byte[] salt = generateSalt();
        user.setSalt(salt);
        user.setPassWord(encryptPassword(password, salt));
        user.setFbLink(facebook);
        user.setPermissions(Permissions.PLEB);
        if (facebook) {
            if (existsFB(fbID)||existsEmail(email)){
                return null;
            }
            user.setDisplayName(displayName);
            user.setAvatar(fbAvatarURL);
            byte[] fbSalt = generateSalt();
            user.setFacebookSalt(fbSalt);
            user.setFacebookID(encryptPassword(fbID, fbSalt));
        } else {
            if (existsEmail(email)) return null;
            user.setDisplayName(email.substring(0, email.indexOf('@')));
        }
        user.save();
        return validateUser(email, password);
    }
    
    @Override
    public boolean equals(Object o) {
        if (o != null && o instanceof User) {
            return this.id == ((User)o).id;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 83 * hash + this.id;
        hash = 83 * hash + Objects.hashCode(this.userEmail);
        hash = 83 * hash + Objects.hashCode(this.permissions);
        return hash;
    }
    /**
     * Saves this user object to the database and assigns it an ID value.
     */
    @Override
    public void save() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        session.saveOrUpdate(this);
        session.getTransaction().commit();
        session.close();
    }
    /**
     * Removes this user object from the database.
     */
    @Override
    public void delete() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        User user = (User) session.get(User.class, this.getId());
        Hibernate.initialize(user.getTruckReviews());
        Hibernate.initialize(user.getItemReviews());
        for (TruckReview tr : user.truckReviews) 
            session.delete(tr);
        
        for (ItemReview ir : user.itemReviews) 
            session.delete(ir);
        
        session.delete(user);
        session.getTransaction().commit();
        session.close();
    }
    /**
     * Loads the user with the specified ID.
     * @param id the ID of the user to load
     * @param loadReviews true if the reviews written by this user should be loaded along with the user object
     * @return the user with the specified ID
     */
    public static User loadUserByID(int id, boolean loadReviews) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        User retval = (User) session.get(User.class, id);
        if (loadReviews) {
            Hibernate.initialize(retval.getTruckReviews());
            Hibernate.initialize(retval.getItemReviews());
            retval.getTruckReviews().size();
            retval.getItemReviews().size();
        }
        session.close();
        return retval;
    }
    /**
     * Loads the user with the specified ID.
     * @param id the ID of the user to load
     * @return the user with the specified ID
     */
    public static User loadUserByID(int id) {
        return loadUserByID(id, false);
    }
    /**
     * Loads the reviews written by this user from the database.
     * @return the user object containing the reviews written by this user
     */
    public User loadUserReviews() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        User user = (User) session.get(User.class, this.getId());
        Hibernate.initialize(user.getTruckReviews());
        Hibernate.initialize(user.getItemReviews());
        session.getTransaction().commit();
	user.getTruckReviews().size();
        user.getItemReviews().size();
        this.setTruckReviews(user.getTruckReviews());
        this.setItemReviews(user.getItemReviews());
        session.close();
        return user;
    }
    
    public static boolean existsFB(String fbID){
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(
                "from User where facebookID='" + fbID + "'"
        );
        if (q.uniqueResult()==null){
            session.close();
            return false;
        }else{
            session.close();
            return true;
        }
    }
    public static boolean existsEmail(String email){
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery("from User where userEmail = :email").setString("email", email);
        if (q.uniqueResult()==null){
            session.close();
            return false;
        }else{
            session.close();
            return true;
        }
    }
}


